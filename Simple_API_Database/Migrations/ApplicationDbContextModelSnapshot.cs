// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Simple_API_Database.DataAccess;

namespace Simple_API_Database.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Simple_API_Database.Models.EF_Models+Company", b =>
                {
                    b.Property<string>("symbol")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("date");

                    b.Property<string>("iexId");

                    b.Property<bool>("isEnabled");

                    b.Property<string>("name");

                    b.Property<string>("type");

                    b.HasKey("symbol");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Simple_API_Database.Models.HistoricalData", b =>
                {
                    b.Property<double>("high");

                    b.Property<double>("change");

                    b.Property<double>("changeOverTime");

                    b.Property<double>("changePercent");

                    b.Property<double>("close");

                    b.Property<string>("date");

                    b.Property<string>("label");

                    b.Property<double>("low");

                    b.Property<double>("open");

                    b.Property<int>("unadjustedVolume");

                    b.Property<int>("volume");

                    b.Property<double>("vwap");

                    b.HasKey("high");

                    b.ToTable("HistoricalDatas");
                });

            modelBuilder.Entity("Simple_API_Database.Models.KeyStat", b =>
                {
                    b.Property<string>("symbol")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("EBITDA");

                    b.Property<string>("EPSSurpriseDollar");

                    b.Property<string>("EPSSurprisePercent");

                    b.Property<int>("KeystatId");

                    b.Property<string>("beta");

                    b.Property<string>("cash");

                    b.Property<decimal>("consensusEPS");

                    b.Property<string>("day200MovingAvg");

                    b.Property<string>("day50MovingAvg");

                    b.Property<string>("day5ChangePercent");

                    b.Property<string>("debt");

                    b.Property<decimal>("dividendRate");

                    b.Property<string>("dividendYield");

                    b.Property<string>("exDividendDate");

                    b.Property<string>("grossProfit");

                    b.Property<string>("insiderPercent");

                    b.Property<string>("institutionPercent");

                    b.Property<string>("latestEPS");

                    b.Property<string>("latestEPSDate");

                    b.Property<string>("marketcap");

                    b.Property<string>("month1ChangePercent");

                    b.Property<string>("month3ChangePercent");

                    b.Property<string>("month6ChangePercent");

                    b.Property<string>("numberOfEstimates");

                    b.Property<string>("peRatioHigh");

                    b.Property<string>("peRatioLow");

                    b.Property<string>("priceToBook");

                    b.Property<string>("priceToSales");

                    b.Property<string>("profitMargin");

                    b.Property<string>("returnOnAssets");

                    b.Property<string>("returnOnCapital");

                    b.Property<string>("returnOnEquity");

                    b.Property<string>("revenue");

                    b.Property<string>("revenuePerEmployee");

                    b.Property<string>("revenuePerShare");

                    b.Property<string>("sharesOutstanding");

                    b.Property<string>("shortDate");

                    b.Property<string>("shortInterest");

                    b.Property<string>("shortRatio");

                    b.Property<string>("srcfloat");

                    b.Property<decimal>("ttmEPS");

                    b.Property<string>("week52change");

                    b.Property<decimal>("week52high");

                    b.Property<decimal>("week52low");

                    b.Property<string>("year1ChangePercent");

                    b.Property<string>("year2ChangePercent");

                    b.Property<string>("year5ChangePercent");

                    b.Property<string>("ytdChangePercent");

                    b.HasKey("symbol");

                    b.ToTable("KeyStats");
                });

            modelBuilder.Entity("Simple_API_Database.Models.Quote", b =>
                {
                    b.Property<string>("symbol")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("avgTotalVolume");

                    b.Property<string>("calculationPrice");

                    b.Property<string>("change");

                    b.Property<string>("changePercent");

                    b.Property<double>("close");

                    b.Property<long>("closeTime");

                    b.Property<string>("companyName");

                    b.Property<double>("delayedPrice");

                    b.Property<long>("delayedPriceTime");

                    b.Property<double>("high");

                    b.Property<string>("iexAskPrice");

                    b.Property<string>("iexAskSize");

                    b.Property<string>("iexBidPrice");

                    b.Property<string>("iexBidSize");

                    b.Property<string>("iexLastUpdated");

                    b.Property<string>("iexMarketPercent");

                    b.Property<string>("iexRealtimePrice");

                    b.Property<string>("iexRealtimeSize");

                    b.Property<string>("iexVolume");

                    b.Property<double>("latestPrice");

                    b.Property<string>("latestSource");

                    b.Property<string>("latestTime");

                    b.Property<long>("latestUpdate");

                    b.Property<int>("latestVolume");

                    b.Property<double>("low");

                    b.Property<long>("marketCap");

                    b.Property<double>("open");

                    b.Property<long>("openTime");

                    b.Property<double>("peRatio");

                    b.Property<double>("previousClose");

                    b.Property<string>("primaryExchange");

                    b.Property<string>("sector");

                    b.Property<double>("week52High");

                    b.Property<double>("week52Low");

                    b.Property<string>("ytdChange");

                    b.HasKey("symbol");

                    b.ToTable("Quotes");
                });
#pragma warning restore 612, 618
        }
    }
}
